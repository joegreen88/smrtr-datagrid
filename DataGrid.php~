<?php
require_once('DataGridVector.php');

/**
 * 2D-array wrapper with methods for import/export. PHP5.3 +
 * 
 * This class is a one-stop-shop for transporting tabular data between formats.
 * We currently provide the following methods for CSV and JSON:
 * loadCSV, loadJSON, saveCSV, saveJSON, serveCSV, serveJSON, printCSV, printJSON.
 * Planned formats include XML and MySQL. 
 * Handles custom keys (a.k.a. labels) on rows and columns. 
 * Please choose your import/export formats appropriately.
 * 
 * @author Joe Green
 * @package SmrtrLib
 * @version 0.1.2
 * @todo Methods to read CSV/JSON from string: readCSV, readJSON
 * @todo XML and MySQL database table import/export and methods
 * @todo orderRowsBy(keyOrLabel), orderColumnsBy(keyOrLabel)
 * @todo getAssociativeArray() 2d array of data using labels as keys
 */

class Smrtr_DataGrid
{
    
    // Factory
    public static $registry = array();
    public static $IDcounter=0;
    public $ID;
    
    /**
     * A count of columns 
     * @var int
     */
    public $columns;
    
    /**
     * A count of rows
     * @var int 
     */
    public $rows;
    
    /**
     * A map from column keys to column labels or null
     * @var array 
     */
    public $columnKeys = array();
    
    /**
     * A map from row keys to row labels or null
     * @var array 
     */
    public $rowKeys = array();
    
    /**
     * A 2-Dimensional array of scalar data
     * @var array 
     */
    public $data = array();
    
    
    /**
     * ================================================================
     * Keys & Labels
     * ================================================================
     * appendKey
     * appendKeys
     * updateKey
     * prependKey
     * deleteKey
     * swapKeys
     * moveKey
     * trimKeys
     * getKey
     * getLabel
     * ________________________________________________________________
     */
    
    public function appendKey( $rowOrColumn, $label=null )
    {
        if (!in_array($rowOrColumn, array('column', 'row')))
            throw new Smrtr_DataGrid_Exception("'column' or 'row' expected");
        if (is_string($label) && strlen($label))
        {
            if (in_array($label, $this->{$rowOrColumn.'Keys'}))
                throw new Smrtr_DataGrid_Exception($rowOrColumn."Key '$label' already exists");
        }
        elseif (!is_null($label))
            throw new Smrtr_DataGrid_Exception("non-empty string \$label or null expected");
        
        array_push($this->{$rowOrColumn.'Keys'}, $label);
        return $this;
    }
    
    public function appendKeys( $rowOrColumn, array $labels)
    {
        foreach ($labels as $label)
            $this->appendKey($rowOrColumn, $label);
    }
    
    public function updateKey( $rowOrColumn, $key, $label=null )
    {
        if (!in_array($rowOrColumn, array('column', 'row')))
            throw new Smrtr_DataGrid_Exception("'column' or 'row' expected");
        if (!is_int($key) || !array_key_exists($key, $this->{$rowOrColumn.'Keys'}))
            throw new Smrtr_DataGrid_Exception("key not found");
        if (is_string($label) && strlen($label))
        {
            if (in_array($label, $this->{$rowOrColumn.'Keys'}))
                throw new Smrtr_DataGrid_Exception($rowOrColumn."Key '$label' already exists");
        }
        elseif (!is_null($label))
            throw new Smrtr_DataGrid_Exception("non-empty string \$label or null expected");
        $this->{$rowOrColumn.'Keys'}[$key] = $label;
        return $this;
    }
    
    public function prependKey( $rowOrColumn, $label=null )
    {
        if (!in_array($rowOrColumn, array('column', 'row')))
            throw new Smrtr_DataGrid_Exception("'column' or 'row' expected");
        if (is_string($label) && strlen($label))
        {
            if (in_array($label, $this->{$rowOrColumn.'Keys'}))
                throw new Smrtr_DataGrid_Exception($rowOrColumn."Key '$label' already exists");
        }
        elseif (!is_null($label))
            throw new Smrtr_DataGrid_Exception("non-empty string \$label or null expected");
        
        array_unshift($this->{$rowOrColumn.'Keys'}, $label);
        $this->{$rowOrColumn.'s'}++;
        return $this;
    }
    
    public function deleteKey( $rowOrColumn, $keyOrLabel )
    {
        if (!in_array($rowOrColumn, array('column', 'row')))
            throw new Smrtr_DataGrid_Exception("'column' or 'row' expected");
        $key = $this->getKey($rowOrColumn, $keyOrLabel);
        unset($this->{$rowOrColumn.'Keys'}[$key]);
        if ($key != $this->{$rowOrColumn.'s'}-1)
            $this->{$rowOrColumn.'Keys'} = $this->_normalizeKeys(
                $this->{$rowOrColumn.'Keys'}, $this->{$rowOrColumn.'s'}-1
            );
        return $this;
    }
    
    public function emptyKey( $rowOrColumn, $keyOrLabel )
    {
        if (!in_array($rowOrColumn, array('column', 'row')))
            throw new Smrtr_DataGrid_Exception("'column' or 'row' expected");
        $key = $this->getKey($rowOrColumn, $keyOrLabel);
        $this->{$rowOrColumn.'Keys'}[$key] = null;
        return $this;
    }
    
    public function swapKeys( $rowOrColumn, $keyOrLabel1, $keyOrLabel2, $stickyData=true )
    {
        if (!in_array($rowOrColumn, array('column', 'row')))
            throw new Smrtr_DataGrid_Exception("'column' or 'row' expected");
        if ($stickyData)
            $this->{'swap'.ucfirst($rowOrColumn)}('row', $keyOrLabel1, $keyOrLabel2, false);
        $Label1 = $this->getLabel($rowOrColumn, $keyOrLabel1);
        $this->updateKey(
            $rowOrColumn, $keyOrLabel1, 
            $this->getLabel($rowOrColumn, $keyOrLabel2)
        );
        $this->updateKey($rowOrColumn, $keyOrLabel2, $Label1);
        return $this;
    }
    
    public function moveKey( $rowOrColumn, $to_KeyOrLabel, $from_KeyOrLabel, $stickyData=true )
    {
        if (!in_array($rowOrColumn, array('column', 'row')))
            throw new Smrtr_DataGrid_Exception("'column' or 'row' expected");
        if ($stickyData)
            $this->{'move'.ucfirst($rowOrColumn)}(
                $rowOrColumn, $to_KeyOrLabel, $from_KeyOrLabel, false
            );
            
        $keyTo = $this->getKey($rowOrColumn, $to_KeyOrLabel);        
        $keyFrom = $this->getKey($rowOrColumn, $from_KeyOrLabel);
        if ($keyFrom === $keyTo)
            return $this;
        $Label = $this->getLabel($rowOrColumn, $keyFrom);
        if ($keyFrom < $keyTo)
            for ($i = $keyFrom; $i < $keyTo; $i++)
            {
                $tmpLabel = $this->getLabel($rowOrColumn, $i+1);
                $this->emptyKey($rowOrColumn, $i+1);
                $this->updateKey($rowOrColumn, $i, $tmpLabel);
            }
        else
            for ($i = $keyFrom; $i > $keyTo; $i--)
            {
                $tmpLabel = $this->getLabel($rowOrColumn, $i-1);
                $this->emptyKey($rowOrColumn, $i-1);
                $this->updateKey($rowOrColumn, $i, $tmpLabel);
            }
            
        $this->updateKey($rowOrColumn, $keyTo, $Label);
        return $this;
    }
    
    public function trimKeys( $rowOrColumn, $length )
    {
        if (!in_array($rowOrColumn, array('column', 'row')))
            throw new Smrtr_DataGrid_Exception("'column' or 'row' expected");
        if (!is_int($length) || $length < 0)
            throw new Smrtr_DataGrid_Exception("positive int \$length expected");
        $this->{$rowOrColumn.'Keys'} = array_slice(
            $this->{$rowOrColumn.'Keys'}, 0, $length
        );
        return $this;
    }
    
    public function getKey( $rowOrColumn, $keyOrLabel )
    {
        if (!in_array($rowOrColumn, array('column', 'row')))
            throw new Smrtr_DataGrid_Exception("'column' or 'row' expected");
        if (is_string($keyOrLabel))
        {
            $offset = array_search($keyOrLabel, $this->{$rowOrColumn.'Keys'});
            if (false !== $offset)
                return $offset;
            throw new Smrtr_DataGrid_Exception("Label '$keyOrLabel' not found");
        }
        elseif (is_int($keyOrLabel))
        {
            if (array_key_exists($keyOrLabel, $this->{$rowOrColumn.'Keys'}))
                return $keyOrLabel;
            throw new Smrtr_DataGrid_Exception("$rowOrColumn Key $keyOrLabel not found");
        }
        else
            throw new Smrtr_DataGrid_Exception("\$keyOrLabel can be int or string only");
    }
    
    public function getLabel( $rowOrColumn, $key )
    {
        if (!in_array($rowOrColumn, array('column', 'row')))
            throw new Smrtr_DataGridException("'column' or 'row' expected");
        if (!is_int($key))
            throw new Smrtr_DataGrid_Exception("int \$key expected");
        if (array_key_exists($key, $this->{$rowOrColumn.'Keys'}))
            return $this->{$rowOrColumn.'Keys'}[$key];
        return false;
    }
    
    
    /**
     * ================================================================
     * Rows
     * ================================================================
     * appendRow
     * updateRow
     * prependRow
     * getRow
     * emptyRow
     * deleteRow
     * renameRow
     * swapRows
     * moveRow
     * trimRows
     * takeRow
     * ________________________________________________________________
     */
    
    public function appendRow($row, $label=null)
    {
        if (!is_array($row))
            throw new Smrtr_DataGrid_Exception("array expected");
        
        $this->appendKey('row', $label);
        array_push($this->data, $this->_normalizeVector($row, $this->columns));
        $this->rows++;
        return $this;
    }
    
    public function updateRow($keyOrLabel, $row)
    {
        if (!is_array($row))
            throw new Smrtr_DataGrid_Exception("array expected");
        
        $key = $this->getKey('row', $keyOrLabel);
        $this->data[$key] = $this->normalizeVector($row, $this->columns);
        return $this;
    }
    
    public function prependRow($row, $label=null)
    {
        if (!is_array($row))
            throw new Smrtr_DataGrid_Exception("array expected");
        
        $this->appendKey('row', $label);
        array_unshift($this->data, $this->_normalizeVector($row, $this->columns));
        $this->rows++;
        return $this;
    }
    
    public function getRow( $keyOrLabel )
    {
        $key = $this->getKey('row', $keyOrLabel);
        return $this->data[$key];
    }
    
    public function emptyRow( $keyOrLabel )
    {
        $key = $this->getKey('row', $keyOrLabel);
        $this->data[$key] = $this->normalizeVector(array(), $this->columns);
        return $this;
    }
    
    public function deleteRow( $keyOrLabel )
    {
        $lastRowKey = $this->rows - 1;
        $this->moveRow($lastRowKey, $keyOrLabel, true);
        $this->deleteKey('row', $lastRowKey);
        unset($this->data[$i]);
        $this->rows = $lastRowKey;
        return $this;
    }
    
    public function renameRow( $from_KeyOrLabel, $to_Label )
    {
        $keyFrom = $this->getKey('row', $from_KeyOrLabel);
        $this->updateKey('row', $keyFrom, $to_Label);
    }
    
    public function swapRows($keyOrLabel1, $keyOrLabel2, $stickyLabels=true)
    {
        if ($stickyLabels)
            $this->swapKeys('row', $keyOrLabel1, $keyOrLabel2, false);
        $row1 = $this->getRow($keyOrLabel1);
        $this->updateRow($keyOrLabel1, $this->getRow($keyOrLabel2));
        $this->updateRow($keyOrLabel2, $row1);
        return $this;
    }
    
    public function moveRow( $to_KeyOrLabel, $from_KeyOrLabel, $stickyLabels=true )
    {
        if ($stickyLabels)
            $this->moveKey('row', $to_KeyOrLabel, $from_KeyOrLabel, false);
        $keyTo = $this->getKey('row', $to_KeyOrLabel);
        $keyFrom = $this->getKey('row', $from_KeyOrLabel);
        if ($keyFrom === $keyTo)
            return $this;
        $rowData = $this->getRow($keyFrom);
        if ($keyFrom < $keyTo)
            for ($i = $keyFrom; $i < $keyTo; $i++)
                $this->updateRow( $i, $this->getRow($i+1) );
        else
            for ($i = $keyFrom; $i > $keyTo; $i--)
                $this->updateRow( $i, $this->getRow($i-1) );
        $this->updateRow( $keyTo, $rowData );
        return $this;
    }
    
    public function trimRows( $length )
    {
        if (!is_int($length) || $length < 0)
            throw new Smrtr_DataGrid_Exception("positive int \$length expected");
        $this->data = array_slice(
            $this->data, 0, $length
        );
        return $this;
    }
    
    public function takeRow( $keyOrLabel )
    {
        $return = $this->getRow($keyOrLabel);
        $this->deleteRow($keyOrLabel);
        return $return;
    }
    
    
    /**
     * ================================================================
     * Columns
     * ================================================================
     * appendColumn
     * updateColumn
     * prependColumn
     * getColumn
     * emptyColumn
     * deleteColumn
     * renameColumn
     * swapColumns
     * moveColumn
     * trimColumns
     * takeColumn
     * ________________________________________________________________
     */
    
    public function appendColumn( $column, $label=false )
    {
        if (!is_array($column))
            throw new Smrtr_DataGrid_Exception("array expected");
        
        $this->appendKey('column', $label);
        $colVector = $this->_normalizeVector($column, $this->rows);
        foreach ($this->data as $i => $row)
            array_push($this->data[$i], array_shift($colVector));
        $this->columns++;
        return $this;
    }
    
    public function updateColumn($keyOrLabel, $column)
    {
        if (!is_array($column))
            throw new Smrtr_DataGrid_Exception("array expected");
        
        $key = $this->getKey('column', $keyOrLabel);
        $colVector = $this->_normalizeVector($column, $this->rows);
        foreach ($this->data as $i => $row)
            $this->data[$i][$key] = array_shift($colVector);
        return $this;
    }
    
    public function prependColumn( $column, $label=false )
    {
        if (!is_array($column))
            throw new Smrtr_DataGrid_Exception("array expected");
        
        $this->prependKey('column', $label);
        $colVector = $this->_normalizeVector($column, $this->rows);
        foreach ($this->data as $i => $row)
            array_unshift($this->data[$i], array_shift($colVector));
        $this->columns++;
        return $this;
    }
    
    public function getColumn( $keyOrLabel )
    {
        $key = $this->getKey('column', $keyOrLabel);
        $column = array();
        foreach ($this->data as $i => $row)
            $column[$i] = $row[$key];
        return $column;
    }
    
    public function emptyColumn( $keyOrLabel )
    {
        $key = $this->getKey('column', $keyOrLabel);
        foreach ($this->data as $i => $row)
            $this->data[$i][$key] = null;
        return $this;
    }
    
    public function deleteColumn( $keyOrLabel )
    {
        $lastColKey = $this->columns - 1;
        $this->moveColumn($lastColKey, $keyOrLabel, true);
        $this->deleteKey('column', $lastColKey);
        foreach ($this->data as $i => $row)
            unset($this->data[$i][$lastColKey]);
        $this->columns = $lastColKey;
        return $this;
    }
    
    public function renameColumn( $from_KeyOrLabel, $to_Label )
    {
        $keyFrom = $this->getKey('column', $from_KeyOrLabel);
        $this->updateKey('column', $keyFrom, $to_Label);
    }
    
    public function swapColumns($keyOrLabel1, $keyOrLabel2, $stickyLabels=true)
    {
        if ($stickyLabels)
            $this->swapKeys('column', $keyOrLabel1, $keyOrLabel2, false);
        $column1 = $this->getColumn($keyOrLabel1);
        $this->updateColumn($keyOrLabel1, $this->getColumn($keyOrLabel2));
        $this->updateColumn($keyOrLabel2, $column1);
        return $this;
    }
    
    public function moveColumn( $to_KeyOrLabel, $from_KeyOrLabel, $stickyLabels=true )
    {
        if ($stickyLabels)
            $this->moveKey('column', $to_KeyOrLabel, $from_KeyOrLabel, false);
        $keyTo = $this->getKey('column', $to_KeyOrLabel);
        $keyFrom = $this->getKey('column', $from_KeyOrLabel);
        if ($keyFrom === $keyTo)
            return $this;
        $columnData = $this->getRow($keyFrom);
        if ($keyFrom < $keyTo)
            for ($i = $keyFrom; $i < $keyTo; $i++)
                $this->updateColumn( $i, $this->getColumn($i+1) );
        else
            for ($i = $keyFrom; $i > $keyTo; $i--)
                $this->updateColumn( $i, $this->getColumn($i-1) );
        $this->updateColumn( $keyTo, $columnData );
        return $this;
    }
    
    public function trimColumns( $length )
    {
        if (!is_int($length) || $length < 0)
            throw new Smrtr_DataGrid_Exception("positive int \$length expected");
        if ($length > $this->columns)
            return $this;
        foreach ($this->data as $i => $row)
            $this->data[$i] = array_slice(
                $this->data[$i], 0, $length
            );
        return $this;
    }
    
    public function takeColumn( $keyOrLabel )
    {
        $return = $this->getColumn($keyOrLabel);
        $this->deleteColumn($keyOrLabel);
        return $return;
    }
    
    
    /**
     * ================================================================
     * The Grid
     * ================================================================
     * setValue
     * getValue
     * loadArray
     * getArray
     * getAssociativeArray
     * transpose
     * info
     * row
     * column
     * _importMatrix
     * _normalizeVector
     * _normalizePoint
     * __construct
     * getByID
     * ________________________________________________________________
     */
    
    public function setValue( $rowKeyOrLabel, $columnKeyOrLabel, $value )
    {
        $rowKey = $this->getKey('row', $rowKeyOrLabel);
        $columnKey = $this->getKey('column', $columnKeyOrLabel);
        $this->data[$rowKey][$columnKey] = $this->_normalizePoint($value);
        return $this;
    }
    
    public function getValue( $rowKeyOrLabel, $columnKeyOrLabel )
    {
        $rowKey = $this->getKey('row', $rowKeyOrLabel);
        $columnKey = $this->getKey('column', $columnKeyOrLabel);
        return $this->data[$rowKey][$columnKey];
    }
    
    public function loadArray( $data )
    {
        $this->_importMatrix($data);
        $this->trimKeys('row', $this->rows);
        $this->trimKeys('column', $this->columns);
        return $this;
    }
    
    public function getArray()
    {
        return $this->data;
    }
    
    public function getAssociativeArray( $associateRows=true, $associateColumns=true )
    {
        $out = array();
        if (!count($this->data))
            return $out;
        $colKeys = array();
        for ($j=0; $j<$this->columns; $j++)
        {
            if ($associateColumns && is_string($this->columnKeys[$j]))
                $colKeys[] = $this->columnKeys[$j];
            else
                $colKeys[] = $j;
        }
        for ($i=0; $i<$this->rows; $j++)
        {
            if ($associateRows && is_string($this->rowKeys[$i]))
                $rowKey = $this->rowKeys[$i];
            else
                $rowKey = $i;
            $out[$rowKey] = array_combine($colKeys, $row);
        }
        return $out;
    }
    
    public function transpose()
    {
        $data = array();
        $rows = $this->columns;
        $columns = $this->rows;
        $rowKeys = $this->columnKeys;
        $columnKeys = $this->rowKeys;
        for ($i=0; $i<$this->columns; $i++)
            $data[] = $this->getColumn($i);
        $this->rowKeys = $rowKeys;
        $this->columnKeys = $columnKeys;
        $this->rows = $rows;
        $this->columns = $columns;
        $this->data = $data;
        return $this;
    }
    
    public function info()
    {
        return array(
            'rowCount' => $this->rows,
            'columnCount' => $this->columns,
            'rowKeys' => $this->rowKeys,
            'columnKeys' => $this->columnKeys
        );
    }
    
    protected function _importMatrix( array $data, $matchLabels=false )
    {
        $vectors = array();
        $columns = 0; $rows = 0;
        foreach ($data as $row)
        {
            $j = 0;
            $vector = array();
            foreach ($row as $key => $val)
            {
                if ($matchLabels && !in_array($key, $this->columnKeys))
                    continue;
                $vector[] = (is_scalar($val) || is_null($val))
                    ? $val : null;
                $j++;
            }
            $vectors[] = $vector;
            $columns = max(array($columns, $j));
            $rows++;
        }
        $this->columns = $columns;
        $this->rows = $rows;
        foreach ($vectors as $i => $row)
            $vectors[$i] = array_pad($row, $columns, null);
        $this->data = $vectors;
    }
    
    protected function _normalizeVector( array $ntuple, $size=null )
    {
        $vector = array(); $count = 0;
        foreach ($ntuple as $val)
        {
            $vector[] = (is_scalar($val) || is_null($val))
                ? $val : null;
            $count++;
        }
        if (is_int($size))
        {
            if ($size < $count)
                throw new Exception("Size provided is smaller than vector length");
            elseif ($size > $count)
                $vector = array_pad($vector, $size, null);
        }
        return $vector;
    }
    
    protected function _normalizeKeys( array $keys, $size=null )
    {
        $vector = array(); $count = 0;
        foreach ($ntuple as $val)
        {
            $vector[] = (is_scalar($val) || is_null($val))
                ? (string) $val : null;
            $count++;
        }
        if (is_int($size))
        {
            if ($size < $count)
                throw new Exception("Size provided is smaller than vector length");
            elseif ($size > $count)
                $vector = array_pad($vector, $size, null);
        }
        return $vector;
    }
    
    protected function _normalizePoint( $point )
    {
        return (is_scalar($point) || is_null($point))
            ? $point : null;
    }
    
    public function __construct( array $data = array(), $associateRowLabels=false, $useFirstRowAsColumnLabels=false )
    {
        $this->ID = self::$IDcounter++;
        if (!empty($data)) {
            if ($useFirstRowAsColumnLabels && $row = array_shift($data))
                $this->columnLabels($row);
            if (!empty($data)) {
                if ($associateRowLabels)
                    $this->rowLabels(array_keys($data));
                $this->_importMatrix($data);
            }
        }
        self::$registry[$this->ID] = $this;
    }
    
    public static function getByID($ID)
    {
        return array_key_exists($ID, self::$registry)
            ? self::$registry[$ID] : null;
    }
    
    
    /*
     * ================ [ JSON Import/Export ] =================================
     */
    
    public function loadJSON( $fileName, $rowKeysAsRowKeys=false, $firstRowsKeysAsColumnKeys=false )
    {
        return $this->readJSON(file_get_contents($fileName), $rowKeysAsRowKeys, $firstRowsKeysAsColumnKeys);
    }
    
    public function readJSON( $JSON, $rowKeysAsRowKeys=false, $firstRowsKeysAsColumnKeys=false )
    {
        $data = (array) json_decode($JSON);
        if (!count($data))
            throw new Smrtr_DataGrid_Exception("No data found");
        
        if ($firstRowsKeysAsColumnKeys)
        {
            $first = array_shift($data);
            $this->appendKeys('column', array_keys((array) $first));
            array_unshift($data, $first);
        }
        if ($rowKeysAsRowKeys)
            $this->appendKeys('row', array_keys($data));
        
        $this->_importMatrix($data, $firstRowsKeysAsColumnKeys);
        
        if (!$rowKeysAsRowKeys)
            $this->appendKeys('row', array_fill(0, $this->rows, null));
        if (!$firstRowsKeysAsColumnKeys)
            $this->appendKeys('column', array_fill(0, $this->columns, null));
        return $this;
    }
    
    public function saveJSON( $fileName, $keyRowsByRowKeys=false, $keyFieldsByColumnKeys=false )
    {
        $data = $this->getAssociativeArray($keyRowsByRowKeys, $keyFieldsByColumnKeys);
        file_put_contents( $fileName, json_encode($data), LOCK_EX );
        return $this;
    }
    
    public function serveJSON( $fileName, $keyRowsByRowKeys=false, $keyFieldsByColumnKeys=false )
    {
        header("Pragma: public");
        header("Expires: 0");
        header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
        header("Cache-Control: private",false);
        header('Content-type: application/json');
        header('Content-Disposition: attachment; filename="'.$fileName.'"');
        header("Content-Transfer-Encoding: binary");
        echo json_encode($this->getAssociativeArray($keyRowsByRowKeys, $keyFieldsByColumnKeys));
        return $this;
    }
    
    public function printJSON( $keyRowsByRowKeys=false, $keyFieldsByColumnKeys=false )
    {
        print json_encode($this->getAssociativeArray($keyRowsByRowKeys, $keyFieldsByColumnKeys));
        return $this;
    }
    
    
    /*
     * ================ [ CSV Import/Export ] ==================================
     */
    
    public function loadCSV( $fileName, $firstColumnAsRowKeys=false, $firstRowAsColumnKeys=false, $delimeter=",", $enclosure='"' )
    {
        $fileStream = fopen( $fileName, 'r '); 
        $go = true;
        $data = array();
        while ($row = fgetCSV( $fileStream, 0, $delimeter, $enclosure ))
        {
            if ($firstRowAsColumnKeys && $go) {
                if ($firstColumnAsRowKeys)
                    $this->appendKeys('column', array_slice((array) $row, 1));
                else
                    $this->appendKeys('column', (array) $row);
                $go = false; continue;
            }
            if ($firstColumnAsRowKeys) $this->appendKey('row', (string) array_shift($row));
            $data[] = $row;
        }
        fclose($fileStream);
        
        $this->_importMatrix($data);
        
        if (!$firstColumnAsRowKeys)
            $this->appendKeys('row', array_fill(0, $this->rows, null));
        if (!$firstRowAsColumnKeys)
            $this->appendKeys('column', array_fill(0, $this->columns, null));
        return $this;
    }
    
    public function readCSV( $CSV, $firstColumnAsRowKeys=false, $firstRowAsColumnKeys=false, $delimeter=",", $enclosure='"' )
    {
        $go = true;
        $data = array();
        $rows = str_getCSV($CSV, PHP_EOL);
        foreach ($rows as $line)
        {
            $row = str_getCSV( $line, $delimeter, $enclosure );
            if ($firstRowAsColumnKeys && $go) {
                if ($firstColumnAsRowKeys)
                    $this->appendKeys('column', array_slice($row, 1));
                else
                    $this->appendKeys('column', $row);
                $go = false; continue;
            }
            if ($firstColumnAsRowKeys)
                $this->appendKey('row', (string) array_shift($row));
            $data[] = $row;
        }
        
        $this->_importMatrix($data);
        
        if (!$firstColumnAsRowKeys)
            $this->appendKeys('row', array_fill(0, $this->rows, null));
        if (!$firstRowAsColumnKeys)
            $this->appendKeys('column', array_fill(0, $this->columns, null));
        return $this;
    }
    
    public function saveCSV( $fileName, $includeRowKeys=false, $includeColumnKeys=false, $delimeter=",", $enclosure='"' )
    {
        $fileStream = fopen($fileName, 'w');
        $data = $this->_prepareCSV($includeRowKeys, $includeColumnKeys);
        array_walk( $data, function(&$vals, $keys, $vars) {
            fputCSV( $vars['outstream'], $vals, $vars['delimeter'], $vars['enclosure'] );
        }, array('outstream'=>$fileStream, 'delimeter'=>$delimeter, 'enclosure'=>$enclosure) );
        fclose($fileStream);
        return $this;
    }
    
    public function serveCSV( $fileName, $includeRowKeys=false, $includeColumnKeys=false, $delimeter=",", $enclosure='"', $excelForceRawRender=false )
    {
        header("Pragma: public");
        header("Expires: 0");
        header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
        header("Cache-Control: private",false);
        header("Content-Type: application/octet-stream");
        header('Content-Disposition: attachment; filename="'.$fileName.'"');
        header("Content-Transfer-Encoding: binary");
        if($excelForceRawRender) echo "\xef\xbb\xbf";
        $outStream = fopen("php://output", "r+");
        $data = $this->_prepareCSV($includeRowKeys, $includeColumnKeys);
        array_walk( $data, function(&$vals, $keys, $vars) {
            fputCSV( $vars['outstream'], $vals, $vars['delimeter'], $vars['enclosure'] );
        }, array('outstream'=>$outStream, 'delimeter'=>$delimeter, 'enclosure'=>$enclosure) );
        fclose($outStream);
        return $this;
    }
    
    public function printCSV( $includeRowKeys=false, $includeColumnKeys=false, $delimeter=",", $enclosure='"' )
    {
        $outStream = fopen("php://output", "r+");
        $data = $this->_prepareCSV($includeRowKeys, $includeColumnKeys);
        array_walk( $data, function(&$vals, $keys, $vars) {
            fputCSV( $vars['outstream'], $vals, $vars['delimeter'], $vars['enclosure']);
        }, array('outstream'=>$outStream, 'delimeter'=>$delimeter, 'enclosure'=>$enclosure) );
        fclose($outStream);
        return $this;
    }
    
    protected function _prepareCSV($includeRowKeys=false, $includeColumnKeys=false)
    {
        $out = $this->data;
        if ($includeRowKeys)
            for ($i=0; $i<$this->rows; $i++)
                array_unshift($out[$i], (
                    is_string($this->rowKeys[$i])
                    ? $this->rowKeys[$i]
                    : $i
                ));
        if ($includeColumnKeys && !is_null($this->columnKeys))
        {
            $colKeys = array();
            for ($j=0; $j<$this->columns; $j++)
                $colKeys[] = is_string($this->columnKeys[$j])
                    ? $this->columnKeys[$j]
                    : $j;
            array_unshift($out, (($includeRowKeys)
                ? array_merge(array(""), $colKeys)
                : $colKeys));
        }
        return $out;
    }
    
}



class Smrtr_DataGrid_Exception extends Exception {}
